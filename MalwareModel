import keras
import tensorflow as tf
from keras.models import Sequential, Input, Model
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from tensorflow.keras.layers import BatchNormalization

num_classes = 25

def malware_model():
  Malware_model = Sequential()
  #Convolutional layer : 30 Filters, 3*3 kernel size, RELU activation
  Malware_model.add(Conv2D(30, kernel_size=(3,3), activation='relu', input_shape=(64,64,3)))
  #Max pooling layer (2*2) pool size
  Malware_model.add(MaxPooling2D(pool_size=(2,2)))
  #Convolutional layer: 15 filters (3*3) kernel size
  Malware_model.add(Conv2D(15, kernel_size=(3,3)))
  #Max pooling layer (2*2)
  Malware_model.add(MaxPooling2D(pool_size=(2,2)))
  #Dropout layer dropping 25% neurons
  Malware_model.add(Dropout(0.25))
  #Flatten layer
  Malware_model.add(Flatten())
  #Dense/fully connected layer: drop 50% neurons
  Malware_model.add(Dense(128, activation='relu'))
  #Dropout layer dropping 50% neurons
  Malware_model.add(Dropout(0.5))
  #Dense/fully connected layer: 50 neurons relu
  Malware_model.add(Dense(50, activation='relu'))
  #^ num_class Neurons softmax activation function
  Malware_model.add(Dense(num_classes, activation='softmax'))
  #compile the model
  Malware_model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
  return Malware_model

Malware_model = malware_model()
Malware_model.summary()



